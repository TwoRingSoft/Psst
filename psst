#!/bin/bash

PSST_KEYS_PATH="./.psst/keys"
PSST_SECRETS_PATH="./.psst/values"
PSST_KEYCHAIN_PATH="${1}"

# make sure we're running from the repo's root dir
if [[ ! -e ".git" ]]; then
	echo "This script must be run from the root directory of the repo."
	exit 64
fi

KEYS_TO_REPLACE=`awk '{print $1};' ${PSST_KEYS_PATH}`
for KEY_TO_REPLACE in ${KEYS_TO_REPLACE[@]}; do
	# try to get the value from the mapping file
	if [[ -e $PSST_SECRETS_PATH ]]; then
		VALUE_TO_REPLACE=`grep $KEY_TO_REPLACE ${PSST_SECRETS_PATH} | awk '{print $2};'`
	fi
		
	# try indirectly expanding an environment variable of the same name as the key
	if [[ -z $VALUE_TO_REPLACE ]]; then
		VALUE_TO_REPLACE="${!KEY_TO_REPLACE}"
	fi
		
	# try to retrieve from specified keychain
	if [[ -z $VALUE_TO_REPLACE ]]; then
		if [[ -n $PSST_KEYCHAIN_PATH && -e $PSST_KEYCHAIN_PATH ]]; then
			VALUE_TO_REPLACE=`security find-generic-password -ga $KEY_TO_REPLACE -w "${KEYCHAIN_PATH}"`
		else
			echo "No value was found for key $KEY_TO_REPLACE."
			exit 65
		fi
	fi
		
	FILES_TO_REPLACE_IN=`grep --recursive --files-with-matches --exclude-dir ./.psst $KEY_TO_REPLACE .`
	for FILE_TO_REPLACE_IN in ${FILES_TO_REPLACE_IN[@]}; do
		if [[ $FILE_TO_REPLACE_IN = "${PSST_SECRETS_PATH}" ]]; then
			continue
		fi
										
		if [[ -n $VALUE_TO_REPLACE ]]; then
			sed -i '' -e s/$KEY_TO_REPLACE/$VALUE_TO_REPLACE/g $FILE_TO_REPLACE_IN
		fi
	done
done